
@model Chat.Models.ChatViewModel
@{
    ViewData["Title"] = "Home Page";
}


<div class="row">
    <div class="col-md-3">
        <div class="col-md-6">
            <h2>Salas</h2>
        </div>
        <div class="col-md-3">
            <button class="btn btn-success" data-toggle="modal" data-target="#allRoomsModal" style="margin-top: 18px;margin-left: -32px;" >More</button>
        </div>
        <div class="col-md-3">
            <button class="btn btn-success" data-toggle="modal" data-target="#createRoomsModal" style="margin-top: 18px;margin-left: -32px;">Create</button>
        </div>
            <div id="roomDiv" class="col-md-12">
                <ul class="nav nav-pills nav-stacked" id="rooms">
                    <li class="active"><a href="#">@Model.RoomName</a></li>
                </ul>
            </div>
        </div>    
    <div class="col-md-6" >
        <h2>Chat Arquitecturas Web</h2>
        <div id="rooms-messages">
            @if (Model.Messages != null)
            {
                <ul id="General">
                    @foreach (var message in Model.Messages)
                {
                        <li>@message.Sender.Name: <span>@message.Content</span> <p>@message.Date.ToShortTimeString()</p></li>
                    }

                </ul>
            }
            else
            {

                <ul id="General"></ul>
            }

        </div>
        <input name="content" id="content" type="text" style="width:80%;margin-top: 24px;" />
        <input type="hidden" name="roomName" id="roomName" value="@Model.RoomName" />
        <input type="hidden" name="userName" id="userName" value="@Model.User.Name" />            
        
        <form enctype="multipart/form-data" id="formuploadajax" style="width:10%;float:left;margin-top: 26px;" >
            <span id="inputImage">
                <i class="glyphicon glyphicon-picture"></i>
            </span>        
            <span id="inputAudio">
                <i class="glyphicon glyphicon-bullhorn"></i>
            </span>
            <input id="avatar" type="file" name="chatimage" class="fileInput" style="z-index: 999;line-height: 0;font-size: 50px;position: relative;height:0px;top: -2px;left: -700px;opacity: 0;filter: alpha(opacity = 0);" />                        
        </form>
        <input type="hidden" id="recordInput" value="" />
        <span  id="recordButton"><i class="glyphicon glyphicon-ice-lolly"></i></span>
        <span id="stopButton" style="display:none"><i class="glyphicon glyphicon-remove"></i></span>
        
            
    </div>
    
    <div class="col-md-3">
        <div class="col-md-6">
            <h2>Usuarios</h2>
        </div>
        <div class="col-md-3">
            <button style="margin-top:23px" id="sort-age" class="btn btn-default btn-sm" onclick="sortByAge()">
                <span class="glyphicon glyphicon-sort"></span>Age
            </button>
        </div>
        <div class="col-md-3">
            <button style="margin-top:23px" id="sort-city" class="btn btn-default btn-sm" onclick="sortByCity()"><span class="glyphicon glyphicon-sort"></span>City</button>
        </div>
            

            
            <div id="usersDiv" class=" col-md-12">
                <ul id="General-users" class="list users">
                    @foreach (var user in Model.Users)
                    {
                        <li data-city="@user.City" data-age="@user.Age"><a class="user-a" data-user-name="@user.Name"><i class="glyphicon glyphicon-comment"></i>  @user.Name <p class="age">- @user.Age</p> <p class="city">- @user.City</p> </a></li>
                    }

                </ul>
                <ul class="pagination"></ul>
            </div>

        
        </div>    
</div>

<div class="modal fade" id="allRoomsModal" tabindex="-1" role="dialog" aria-labelledby="watchrooms" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Rooms</h5>
                <button type="button" id="closeEnterRoom" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
               <ul id="allRoomsList">
                   @foreach (var room in Model.Rooms)
                   {
                        <li><a class="enter-room-a" data-room="@room.Name" ><i class="glyphicon glyphicon-eye-open"></i> @room.Name - @room.Subject</a></li>
                   }                   
               </ul>
            </div>      
        </div>
    </div>
</div>



<div class="modal fade" id="createRoomsModal" tabindex="-1" role="dialog" aria-labelledby="createroom" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
@using (Html.BeginForm("CreateRoom", "Chat", FormMethod.Post, htmlAttributes: new { @class = "form-horizontal form-bordered",@id="newroomform", enctype = "multipart/form-data" }))
{
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Create Room</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">                               
                        <input name="name" id="name" placeholder="nombre" type="text" />
                        <input name="subject" id="subject" placeholder="asunto" type="text" />           

            </div>
            <div class="modal-footer">
                <button id="closeNewRoom" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="postNewRoomButton" type="button" class="btn btn-primary">Save</button>
            </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>

        var audio_context;
        var recorder;

        $("#roomDiv").find('li').each(function () {
            $(this).click(function () {

                displayRoom($(this));
            });

        });

        $(function () {
            var usrName = '@Model.User.Name';

        var protocol = location.protocol === "https:" ? "wss:" : "ws:";
        var wsUri = protocol + "//" + window.location.host;
        var socket = new WebSocket(wsUri);
        socket.onopen = e => {
            console.log("socket opened", e);
        };

        socket.onclose = function (e) {
            console.log("socket closed", e);
        };


        socket.onmessage = function (e) {
            debugger
            var msgobj = JSON.parse(e.data);
            console.log(msgobj);
            var name = $('#userName').val();

            if ((msgobj.type == "Create") && (msgobj.content == name)) {
                    var message = msgobj;
                    var newRoomName = message.roomName;

                    createRoom(newRoomName);

            }
            else {
                    if (msgobj.type == "Message") {
                        //checkeo si es de alguna sala a la que pertenezco y lo agrego
                        if ($('#' + msgobj.roomName).html() != undefined) {
                            $('#' + msgobj.roomName).append('<li>' + msgobj.content + '</li>');
                        }
                        $('#' + msgobj.roomName).animate({ scrollTop: $('#' + msgobj.roomName).prop("scrollHeight") }, 1000);
                    }
                    if (msgobj.type == "Image") {
                        //checkeo si es de alguna sala a la que pertenezco y lo agrego
                        if ($('#' + msgobj.roomName).html() != undefined) {
                            var datetime = new Date();
                            var hours = datetime.getHours(); //returns 0-23
                            var minutes = datetime.getMinutes(); //returns 0-59
                            var seconds = datetime.getSeconds(); //returns 0-59

                            if (minutes < 10)
                                minutesString = 0 + minutes + "";
                            else
                                minutesString = minutes;

                            var sender = msgobj.userName;
                            var mcontent = sender + ': <span>  <img src="' + msgobj.content + '" style="width:250px" /> </span> <p>' + hours + ':' + minutes + ':' + seconds;


                            $('#' + msgobj.roomName).append('<li>' + mcontent + ' </li>');
                        }
                        $('#' + msgobj.roomName).animate({ scrollTop: $('#' + msgobj.roomName).prop("scrollHeight") }, 1000);
                    }
                     if (msgobj.type == "Audio") {
                    //checkeo si es de alguna sala a la que pertenezco y lo agrego
                     if ($('#' + msgobj.roomName).html() != undefined) {
                        var datetime = new Date();
                        var hours = datetime.getHours(); //returns 0-23
                        var minutes = datetime.getMinutes(); //returns 0-59
                        var seconds = datetime.getSeconds(); //returns 0-59

                        if (minutes < 10)
                            minutesString = 0 + minutes + "";
                        else
                            minutesString = minutes;

                        var sender = msgobj.userName;
                        var mcontent = sender + ': <span><audio controls><source src="' + msgobj.content + '" type="audio/ogg"><source src="' + msgobj.content + '" type="audio/mpeg">Your browser does not support the audio element.</audio></span> <p>' + hours + ':' + minutes + ':' + seconds;


                        $('#' + msgobj.roomName).append('<li>' + mcontent + ' </li>');
                       }
                       $('#' + msgobj.roomName).animate({ scrollTop: $('#' + msgobj.roomName).prop("scrollHeight") }, 1000);
                    }

                     if (msgobj.type == "Logout") {
                         var usersList = $("#users").find('li');
                         usersList.each(function () {
                             debugger;
                             var liUserName = $(this).attr("data-user-name");
                             if (msgobj.userName == liUserName) {
                                 $(this).remove();
                             }
                         });

                     }
            }


        };

        socket.onerror = function (e) {
            console.error(e.data);
        };

        $("#avatar").on("change", function () { uploadFile("Image"); });
        $("#sound").on("change", function () { uploadFile("Audio"); });
        $("#postNewRoomButton").on("click", function ()
        {
            debugger;
            var usrName = '@Model.User.Name';
            var formData = new FormData(document.getElementById("newroomform"));
            var newRoomName = $("#newroomform").find("#name").val();

            $.ajax({
                url: "/Chat/CreateRoom",
                type: "post",
                dataType: "html",
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (data) {
                    debugger;
                    console.log("done");
                    console.log(data);
                },
                error: function (data) {
                    debugger;
                    console.log("error");
                    console.log(data);

                }
            }).done(function (res) {
                $("#closeNewRoom").click();
                createRoom(newRoomName);
            });


        });

        $(".enter-room-a").click(function () {

                debugger;
            var usrName = '@Model.User.Name';
            
            var newRoomName = $(this).attr("data-room");

            $.ajax({
                url: "/Chat/GetRoom?name=" + newRoomName,
                type: "Get",
                dataType: "html",
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (data) {
                    debugger;
                    console.log("done");
                    console.log(data);
                },
                error: function (data) {
                    debugger;
                    console.log("error");
                    console.log(data);

                }
            }).done(function (res) {
                $("#closeEnterRoom").click();
                debugger;
                var baseUrl = document.location.origin;
                var roomobj = JSON.parse(res);
                console.log(roomobj);

                createRoom(roomobj.Name);

                //ver como avisar que entre a la sala - crear nuevo mensaje para que agregue usuario en la lista de esa sala

                //var toRoom = $(".active").find('a').html();
                //var message = '{ "type": "' + msgtype + '", "content":"' + baseUrl + msgobj.relativePath + '", "userName":"' + usrName + '","roomName":"' + toRoom + '"}';
                //ENVIO AL SOCKET
                //socket.send(message);

                
            });

        });

        function uploadFile(msgtype) {
            debugger
            var usrName = '@Model.User.Name';
            var formData = new FormData(document.getElementById("formuploadajax"));
            var fileName = $("#formuploadajax").find('input').val();
            var extension = fileName.substr((fileName.lastIndexOf('.') + 1));
            switch (extension) {
                case 'jpg':
                case 'png':
                case 'gif':
                    msgtype = "Image";
                    break;
                case 'zip':
                case 'rar':
                    alert('not supported');
                    return false;
                    break;
                case 'pdf':
                    alert('not supported');
                    return false;
                    break;
                case 'mp3':
                case 'mp4':
                case 'avi':
                case 'wav':
                    msgtype = "Audio";
                    break;
                default:
                    break;
            }


            //formData.append(f.attr("name"), $(this)[0].files[0]);
            $.ajax({
                url: "/Multimedia/Upload",
                type: "post",
                dataType: "html",
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (data) {
                    debugger;
                    console.log("done");
                    console.log(data);
                },
                error: function (data) {
                    debugger;
                    console.log("error");
                    console.log(data);

                }
            }).done(function (res) {

                debugger;
                var baseUrl = document.location.origin;
                var msgobj = JSON.parse(res);
                console.log(msgobj);
                var toRoom = $(".active").find('a').html();
                var message = '{ "type": "' + msgtype + '", "content":"' + baseUrl + msgobj.relativePath + '", "userName":"' + usrName + '","roomName":"' + toRoom + '"}';
                //ENVIO AL SOCKET
                socket.send(message);

            });

        }

        function startUserMedia(stream) {
            debugger;
            var input = audio_context.createMediaStreamSource(stream);
            //__log('Media stream created.');
            // Uncomment if you want the audio to feedback directly
            //input.connect(audio_context.destination);
            //__log('Input connected to audio context destination.');

            recorder = new Recorder(input);
            //__log('Recorder initialised.');
        }
        function startRecording(button) {
            recorder && recorder.record();
            button.disabled = true;
            button.nextElementSibling.disabled = false;
            //__log('Recording...');
        }
        function stopRecording(button) {
            recorder && recorder.stop();
            button.disabled = true;
            button.previousElementSibling.disabled = false;
            //__log('Stopped recording.');

            // create WAV download link using audio data blob
            createDownloadLink();

            recorder.clear();
        }

        function createDownloadLink() {

            recorder && recorder.exportWAV(function (blob) {
                debugger;
                //var file = new File([blob], "algo.avi");
                var name = generateUUID();
                    var audio = new File([blob], name+".wav")
                    var fd = new FormData();
                    fd.append('data', audio);
                    //fd.append('fname', name + ".wav");

                    $.ajax({
                        url: "/Multimedia/UploadVoice",
                        type: "post",
                        //dataType: "html",
                        data: fd,
                        cache: false,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            debugger;
                            console.log("done");
                            console.log(data);
                        },
                        error: function (data) {
                            debugger;
                            console.log("error");
                            console.log(data);

                        }
                    }).done(function (res) {

                        debugger;
                        var baseUrl = document.location.origin;
                        var toRoom = $(".active").find('a').html();
                        var message = '{ "type": "Audio", "content":"' + baseUrl + "/Images/" + name+".wav" + '", "userName":"' + usrName + '","roomName":"' + toRoom + '"}';
                        //ENVIO AL SOCKET
                        socket.send(message);

                    });



            });
        }


        function generateUUID() { // Public Domain/MIT
            var d = new Date().getTime();
            if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
                d += performance.now(); //use high-precision timer if available
            }
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d / 16);
                return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
        }


        $(document).ready(function () {
            try {
                // webkit shim
                debugger;
                window.AudioContext = window.AudioContext || window.webkitAudioContext;
                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
                window.URL = window.URL || window.webkitURL;

                audio_context = new AudioContext;
                var input = audio_context.createMediaStreamSource(stream);
                recorder = new Recorder(input);
                //__log('Audio context set up.');
                //__log('navigator.getUserMedia ' + (navigator.getUserMedia ? 'available.' : 'not present!'));
            } catch (e) {
                //alert('No web audio support in this browser!');
            }

            navigator.getUserMedia({ audio: true }, startUserMedia, function (e) {
                //__log('No live audio input: ' + e);
            });
            debugger
            //var monkeyList = new List('test-list', {
            //    valueNames: ['name'],
            //    page: 3,
            //    pagination: true
            //});

            var usersList = new List('usersDiv', {
                valueNames: ['user-a'],
                page: 2,
                pagination: true
            });


        });





        $('#content').keypress(function (e) {
            if (e.which != 13) {
                return;
            }

            var datetime = new Date();
            var hours = datetime.getHours(); //returns 0-23
            var minutes = datetime.getMinutes(); //returns 0-59
            var seconds = datetime.getSeconds(); //returns 0-59

            if (minutes < 10)
                minutesString = 0 + minutes + "";
            else
                minutesString = minutes;

            e.preventDefault();

            var toRoom = $(".active").find('a').html();

            var mcontent =  usrName + ": <span>" + $('#content').val() + '</span> <p>' + hours + ":" + minutes + ":" + seconds;

            var message =  '{ "type": "Message", "content":"'+mcontent+'", "userName":"'+usrName+'","roomName":"'+toRoom+'"}';
            //ENVIO AL SOCKET
            socket.send(message);

            $('#content').val('');
        });

        $('.user-a').click(function (e) {

            debugger;
            e.preventDefault();

            var name = $('#userName').val();
            var otherUserName = $(this).attr("data-user-name"); //html().replace('<i class="glyphicon glyphicon-comment"></i>', '').trim();

            if (otherUserName != name) {

                var roomName = otherUserName + "-" + name;

                var message = '{ "type":"Create","content":"' + otherUserName + '","userName":"' + name + '","roomName":"' + roomName + '"}';

                socket.send(message);

                createRoom(roomName);
            }

        });

        $("#recordButton").click(function () {
            startRecording(this);
            $(this).hide();
            $("#stopButton").show();
        });

        $("#stopButton").click(function () {
            stopRecording(this);
            $(this).hide();
            $("#recordButton").show();
        });

        $('#inputImage').click(function () {
            $('#avatar').click();
        });

        $('#inputAudio').click(function () {
            $('#avatar').click();
        });

        $('#logoutBtn').click(function () {
            logout();
        });

         function logout() {
             debugger;
             var token = '@Model.User.Token';
            var usrName = '@Model.User.Name';
            $.ajax({
                url: "/Home/LogOutAsync?token=" + token,
                type: "get",
                dataType: "html",
                cache: false,
                contentType: false,
                processData: false,
                success: function (data) {
                    console.log("done");
                    console.log(data);
                },
                error: function (data) {
                    console.log("error");
                    console.log(data);

                }
            }).done(function () {
                debugger;


                var message = '{ "type": "Logout", "content":"-", "userName":"' + usrName + '","roomName":"-"}';
                //ENVIO AL SOCKET
                socket.send(message);
                window.location.replace(document.location.origin);
            });

        }


        });

        function createRoom(roomName) {

            $('#rooms').find('li.active').removeClass('active');
            $('#rooms').append("<li class='active'><a href='#'>" + roomName + "</a></li>");

            $('#rooms').find('li.active').click(function () {
                displayRoom($(this));
            });

            //mensaje de nueva sala

            $("#rooms-messages").find('ul').each(function () {
                $(this).hide();
            })

            $("#rooms-messages").append("<ul id='" + roomName + "'></ul>");

            $("#usersDiv").find('ul').each(function () {
                $(this).hide();
            })

            $("#usersDiv").append("<ul id='" + roomName + "-users' class='list users'></ul>");


            $('#messages').html('');
        }

        function displayRoom(li) {
            debugger
            $('#rooms').find('li.active').removeClass('active');
            $(li).addClass('active');

            var name = $(li).find('a').html();

            $("#rooms-messages").find('ul').each(function () {
                $(this).hide();
            });

            $("#usersDiv").find('ul').each(function () {
                $(this).hide();
            });

            $("#" + name).show();
            $("#" + name+"-users").show();
        }


        function sortByCity() {
            debugger;
            $("#users li").sort(sort_li).appendTo('#users');
            function sort_li(a, b) {
                debugger;
                return ($(b).data('city')) < ($(a).data('city')) ? 1 : -1;
            }
        };

        function sortByAge() {
            debugger;
            $("#users li").sort(sort_li).appendTo('#users');
            function sort_li(a, b) {
                debugger;
                return ($(b).data('age')) < ($(a).data('age')) ? 1 : -1;
            }
        };


    </script>

}

